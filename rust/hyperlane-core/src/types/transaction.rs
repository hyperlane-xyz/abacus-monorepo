use std::sync::Arc;

use crate::{ChainResult, Mailbox, U256};
use derive_new::new;

/// State for the next submission attempt generated by a prepare call.
#[derive(Clone, Debug)]
pub struct TxSubmissionData {
    pub metadata: Vec<u8>,
    pub gas_limit: U256,
}

#[derive(new, Clone, Debug)]
pub struct BatchItem<T> {
    pub data: T,
    pub submission_data: TxSubmissionData,
    pub mailbox: Arc<dyn Mailbox>,
}

// Need to define a trait instead of using TryInto because the latter is not
// object safe
pub trait TryBatchAs<T> {
    fn try_batch(&self) -> ChainResult<BatchItem<T>> {
        Err(crate::ChainCommunicationError::BatchingFailed)
    }
}
