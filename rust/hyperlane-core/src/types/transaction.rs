use std::sync::Arc;

use crate::{ChainResult, Mailbox, U256};
use derive_new::new;

/// State for the next submission attempt generated by a prepare call.
#[derive(Clone, Debug)]
pub struct TxSubmissionData {
    /// Transaction metadata
    pub metadata: Vec<u8>,
    /// Gas limit for the transaction
    pub gas_limit: U256,
}

/// A an item to be batched for submission to the chain.
#[derive(new, Clone, Debug)]
pub struct BatchItem<T> {
    /// The data to be submitted
    pub data: T,
    /// Data to do with this transaction submission
    pub submission_data: TxSubmissionData,
    /// The mailbox to send the result to
    /// TODO: turn this into a `destination contract` object when we batch more than just messages
    pub mailbox: Arc<dyn Mailbox>,
}

/// Need to define a trait instead of using TryInto because the latter is not
/// object safe
pub trait TryBatchAs<T> {
    /// Try to convert the item into a batch item
    fn try_batch(&self) -> ChainResult<BatchItem<T>> {
        Err(crate::ChainCommunicationError::BatchingFailed)
    }
}
