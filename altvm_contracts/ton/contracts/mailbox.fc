#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "imports/errors.fc";
#include "imports/ton_msg.fc";
#include "imports/events.fc";
#include "imports/signing_utils.fc";

global int g::version;
global int g::local_domain;
global int g::nonce;
global int g::latest_dispatched_id;
global slice g::default_ism_addr;
global slice g::default_hook_addr;
global slice g::required_hook_addr;
global slice g::owner_addr;
global cell g::deliveries; ;; dict
global cell g::cur_recipients; ;; dict
global cell g::cur_isms; ;; dict

;; Global runtime var
global int g::query_id;

() load_globals() impure inline_ref {
    slice ds = get_data().begin_parse();
    g::version = ds~load_uint(8);
    g::local_domain = ds~load_uint(32);
    g::nonce = ds~load_uint(32);
    g::latest_dispatched_id = ds~load_uint(256);
    g::owner_addr = ds~load_msg_addr();
    g::deliveries = ds~load_dict();
    g::cur_recipients = ds~load_dict();
    g::cur_isms = ds~load_dict();
    slice ds = ds~load_ref().begin_parse();
    g::default_ism_addr = ds~load_msg_addr();
    g::default_hook_addr = ds~load_msg_addr();
    g::required_hook_addr = ds~load_msg_addr();
}

() store_globals() impure inline_ref {
    cell addr_cell = begin_cell()
        .store_slice(g::default_ism_addr)
        .store_slice(g::default_hook_addr)
        .store_slice(g::required_hook_addr)
        .end_cell();
    cell data = begin_cell()
        .store_uint(g::version, 8)
        .store_uint(g::local_domain, 32)
        .store_uint(g::nonce, 32)
        .store_uint(g::latest_dispatched_id, 256)
        .store_slice(g::owner_addr)
        .store_dict(g::deliveries)
        .store_dict(g::cur_recipients)
        .store_dict(g::cur_isms)
        .store_ref(addr_cell)
        .end_cell();
    set_data(data);
}

(cell, ()) ~authorize(
    cell addr_dict,
    slice msg_sender
) impure inline {
    (slice expected_addr, int found?) = addr_dict~udict_delete_get?(64, g::query_id);
    throw_unless(error::unauthorized_sender, found?);
    throw_unless(
        error::unauthorized_sender,
        equal_slices(expected_addr, msg_sender)
    );
    return (addr_dict, ());
}

builder hyperlane::message::build(
    slice sender,
    int dest_domain,
    int recipient_addr,
    cell message
) inline {
    (_, int parsed_addr) = parse_std_addr(sender);
    return begin_cell()
        .store_uint(g::version, 8)
        .store_uint(g::nonce, 32)
        .store_uint(g::local_domain, 32)
        .store_uint(parsed_addr, 256)
        .store_uint(dest_domain, 32)
        .store_uint(recipient_addr, 256)
        .store_ref(message);
}

(int, int, int, int, int, int, int, cell) hyperlane::message::unpack(slice hyp_msg) inline {
    int id = message_id(hyp_msg);
    int version = hyp_msg~load_uint(8);
    int nonce = hyp_msg~load_uint(32);
    int origin_domain = hyp_msg~load_uint(32);
    int sender = hyp_msg~load_uint(256);
    int dest_domain = hyp_msg~load_uint(32);
    int recipient = hyp_msg~load_uint(256);
    cell body = hyp_msg~load_ref();

    return (id, version, nonce, origin_domain, sender, dest_domain, recipient, body);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if ( in_msg_body.slice_empty?() ) { ;; accept simple transfer
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ( flags & 1 ) { ;; ignore all bounced messages
        return ();
    }

    slice msg_sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    g::query_id = in_msg_body~load_uint(64);

    load_globals();

    if (op == op::dispatch) {
        int dest_domain = in_msg_body~load_uint(32);
        int recipient_addr = in_msg_body~load_uint(256);
        int required_value = in_msg_body~load_uint(128);
        cell message = in_msg_body~load_ref();
        cell hook_metadata = in_msg_body~load_ref();

        builder interchain_msg = hyperlane::message::build(
            msg_sender,
            dest_domain,
            recipient_addr,
            message
        );

        int id = message_id(interchain_msg.end_cell().begin_parse());

        builder data = begin_cell()
            .store_uint(id, 256)
            .store_ref(begin_cell()
                .store_slice(msg_sender)
                .store_uint(dest_domain, 32)
                .store_uint(recipient_addr, 256)
                .store_ref(interchain_msg.end_cell())
                .end_cell()
            );

        send_event(event::dispatch, data);
        g::latest_dispatched_id = id;
        g::nonce += 1;
        
        cell body = begin_cell()
            .store_uint(op::post_dispatch, 32)
            .store_uint(g::query_id, 64)
            .store_uint(id, 256)
            .store_uint(dest_domain, 32)
            .store_slice(msg_sender)
            .store_ref(hook_metadata)
            .end_cell();

        builder post_dispatch_msg = build_message(
            g::required_hook_addr,
            msg_value - required_value,
            true,
            null(),
            body
        );

        reserve_original_balance(msg_value, required_value);
        send_raw_message(post_dispatch_msg.end_cell(), send_mode::pay_transfer_fees_separately);

        msg_value = msg_value - required_value;

        builder default_hook_msg = build_message(
            g::default_hook_addr,
            msg_value,
            true,
            null(),
            body
        );
        send_raw_message(default_hook_msg.end_cell(), send_mode::carry_remaining_balance);

        return store_globals();
    }

    if (op == op::process) {
        int sub_op = in_msg_body~load_uint(32);
        if (sub_op == op::process::init) {
            int block_number = in_msg_body~load_uint(48);
            slice forward_payload = in_msg_body;
            ;; formatted hyperlane message
            slice message = in_msg_body~load_ref().begin_parse();
            (
                int id,
                int version,
                int nonce, 
                int origin_domain, 
                int sender,
                int dest_domain,
                int recipient,
                cell body
            ) = hyperlane::message::unpack(message);

            ;; check if message has right version
            throw_unless(error::wrong_mailbox_version, version == g::version);

            ;; check if message has right destination domain
            throw_unless(error::wrong_dest_domain, dest_domain == g::local_domain);

            ;; check if message was delivered
            (_, int found?) = g::deliveries.udict_get_ref?(256, id);
            throw_if(error::message_delivered, found?);

            cell delivery = begin_cell()
                .store_uint(sender, 256)
                .store_uint(block_number, 48)
                .end_cell();

            g::deliveries~udict_set_ref(256, id, delivery);

            ;; get recepient ism 
            slice recipient_addr = build_addr(0, recipient);
            g::cur_recipients~udict_set(64, g::query_id, recipient_addr);
            cell get_ism_body = begin_cell()
                .store_uint(op::get_ism, 32)
                .store_uint(g::query_id, 64)
                .store_slice(forward_payload)
                .end_cell();
            builder get_ism_msg = build_message(recipient_addr, 0, true, null(), get_ism_body);
            send_raw_message(get_ism_msg.end_cell(), send_mode::carry_remaining_value);
            return store_globals();
        }

        if(sub_op == op::process::verify) {
            g::cur_recipients~authorize(msg_sender);

            ;; verify message
            int ism_found? = in_msg_body~load_int(1);
            cell message = in_msg_body~load_ref();
            cell metadata = in_msg_body~load_ref();
            cell verify_body = begin_cell()
                .store_uint(op::verify, 32)
                .store_uint(g::query_id, 64)
                .store_ref(message)
                .store_ref(metadata)
                .end_cell();
            slice ism_addr = ism_found? ? in_msg_body~load_msg_addr() : g::default_ism_addr;
            g::cur_isms~udict_set(64, g::query_id, ism_addr);
            builder verify_msg = build_message(ism_addr, 0, true, null(), verify_body);
            send_raw_message(verify_msg.end_cell(), send_mode::carry_remaining_value);
            return store_globals();
        }

        if (sub_op == op::process::deliver_message) {
            g::cur_isms~authorize(msg_sender);

            int verified? = in_msg_body~load_int(1);
            throw_unless(error::message_verification_failed, verified?);
            slice message = in_msg_body~load_ref().begin_parse();

            message~skip_bits(8 + 32);

            int origin_domain = message~load_uint(32);
            int sender = message~load_uint(256);
            int dest_domain = message~load_uint(32);
            int recipient = message~load_uint(256);
            cell message_body = message~load_ref();

            slice recipient_addr = build_addr(0, recipient);
            cell body = begin_cell()
                .store_uint(op::handle, 32)
                .store_uint(g::query_id, 64)
                .store_uint(origin_domain, 32)
                .store_uint(sender, 256)
                .store_ref(message_body)
                .end_cell();


            ;; deliver message (send msg with handle opcode)
            builder msg = build_message(recipient_addr, 0, true, null(), body);
            send_raw_message(msg.end_cell(), send_mode::carry_remaining_value);
            return store_globals();
        }
        throw(error::unknown_sub_op);
    }

    if (op == op::set_default_ism) {
        throw_unless(
            error::unauthorized_sender,
            equal_slices(msg_sender, g::owner_addr)
        );
        g::default_ism_addr = in_msg_body~load_msg_addr();
        return store_globals();
    } 

    if (op == op::set_default_hook) {
        throw_unless(
            error::unauthorized_sender,
            equal_slices(msg_sender, g::owner_addr)
        );
        g::default_hook_addr = in_msg_body~load_msg_addr();
        return store_globals();
    }

    if (op == op::set_required_hook) {
        throw_unless(
            error::unauthorized_sender,
            equal_slices(msg_sender, g::owner_addr)
        );
        g::required_hook_addr = in_msg_body~load_msg_addr();
        return store_globals();
    }

    throw(error::unknown_op);
}

int get_nonce() method_id {
    load_globals();
    return g::nonce;
}

int get_local_domain() method_id {
    load_globals();
    return g::local_domain;
}

int get_latest_dispatched_id() method_id {
    load_globals();
    return g::latest_dispatched_id;
}

cell get_deliveries() method_id {
    load_globals();
    return g::deliveries;
}

slice get_default_ism() method_id {
    load_globals();
    return g::default_ism_addr;
}

slice get_default_hook() method_id {
    load_globals();
    return g::default_hook_addr;
}

slice get_required_hook() method_id {
    load_globals();
    return g::required_hook_addr;
}