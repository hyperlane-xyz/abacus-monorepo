// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

import {ChainlinkAggregator} from "../contracts/middleware/ChainlinkAggregator.sol";
import {MockHyperlaneEnvironment} from "../contracts/mock/MockHyperlaneEnvironment.sol";
import {AggregatorV3Interface} from "../contracts/interfaces/chainlink/AggregatorV3Interface.sol";

import {TypeCasts} from "../contracts/libs/TypeCasts.sol";

contract ChainlinkAggregatorTest is Test {
    event AnswerUpdated(
        int256 indexed current,
        uint256 indexed roundId,
        uint256 updatedAt
    );

    MockHyperlaneEnvironment testEnvironment;
    ChainlinkAggregator aggregator;

    uint32 originDomain = 123;
    uint32 destinationDomain = 321;
    bytes report = (
        hex"000000000000000000000008afbcf24ae1efc261fa46eec7819049000089c704071d01151e19090a05080b120f16100e001c02061a1417030d1b0c04131118000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001f000000000000000000000000000000000000000000000000000000282fedba960000000000000000000000000000000000000000000000000000002830682e3e0000000000000000000000000000000000000000000000000000002832faf7800000000000000000000000000000000000000000000000000000002833c154c000000000000000000000000000000000000000000000000000000028345927f000000000000000000000000000000000000000000000000000000028345927f000000000000000000000000000000000000000000000000000000028345927f000000000000000000000000000000000000000000000000000000028345927f0000000000000000000000000000000000000000000000000000000283487b200000000000000000000000000000000000000000000000000000000283487b200000000000000000000000000000000000000000000000000000000283487b200000000000000000000000000000000000000000000000000000000283487b20000000000000000000000000000000000000000000000000000000028350ea1f20000000000000000000000000000000000000000000000000000002835467d6b00000000000000000000000000000000000000000000000000000028357e79c800000000000000000000000000000000000000000000000000000028359b54800000000000000000000000000000000000000000000000000000002835a99cc00000000000000000000000000000000000000000000000000000002835a99cc00000000000000000000000000000000000000000000000000000002835abba690000000000000000000000000000000000000000000000000000002835c82140000000000000000000000000000000000000000000000000000000283604c89800000000000000000000000000000000000000000000000000000028360548d700000000000000000000000000000000000000000000000000000028360548d700000000000000000000000000000000000000000000000000000028360548d700000000000000000000000000000000000000000000000000000028363aa16b00000000000000000000000000000000000000000000000000000028366ffa00000000000000000000000000000000000000000000000000000000283708908000000000000000000000000000000000000000000000000000000028370890800000000000000000000000000000000000000000000000000000002837089080000000000000000000000000000000000000000000000000000000283754dbc0000000000000000000000000000000000000000000000000000000283a3d2ea0"
    );

    function setUp() public {
        aggregator = new ChainlinkAggregator();

        testEnvironment = new MockHyperlaneEnvironment(
            originDomain,
            destinationDomain
        );

        address owner = address(this);
        aggregator.initialize(
            address(testEnvironment.mailboxes(destinationDomain)),
            address(testEnvironment.igps(destinationDomain)),
            address(testEnvironment.isms(destinationDomain)),
            owner,
            0xE62B71cf983019BFf55bC83B48601ce8419650CC,
            8
        );
    }

    function testHandleValidMessage() public {
        vm.expectEmit(true, false, false, true);
        emit AnswerUpdated(172698064000, 1, 1);

        testEnvironment.mailboxes(originDomain).dispatch(
            destinationDomain,
            TypeCasts.addressToBytes32(address(aggregator)),
            report
        );

        testEnvironment.processNextPendingMessage();

        (, int256 answer, , , ) = aggregator.latestRoundData();
        assertEq(answer, 172698064000);
    }
}
