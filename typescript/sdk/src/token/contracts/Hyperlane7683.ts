/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from './common.js';

export type OutputStruct = {
  token: BytesLike;
  amount: BigNumberish;
  recipient: BytesLike;
  chainId: BigNumberish;
};

export type OutputStructOutput = [string, BigNumber, string, BigNumber] & {
  token: string;
  amount: BigNumber;
  recipient: string;
  chainId: BigNumber;
};

export type FillInstructionStruct = {
  destinationChainId: BigNumberish;
  destinationSettler: BytesLike;
  originData: BytesLike;
};

export type FillInstructionStructOutput = [BigNumber, string, string] & {
  destinationChainId: BigNumber;
  destinationSettler: string;
  originData: string;
};

export type ResolvedCrossChainOrderStruct = {
  user: string;
  originChainId: BigNumberish;
  openDeadline: BigNumberish;
  fillDeadline: BigNumberish;
  maxSpent: OutputStruct[];
  minReceived: OutputStruct[];
  fillInstructions: FillInstructionStruct[];
};

export type ResolvedCrossChainOrderStructOutput = [
  string,
  BigNumber,
  number,
  number,
  OutputStructOutput[],
  OutputStructOutput[],
  FillInstructionStructOutput[],
] & {
  user: string;
  originChainId: BigNumber;
  openDeadline: number;
  fillDeadline: number;
  maxSpent: OutputStructOutput[];
  minReceived: OutputStructOutput[];
  fillInstructions: FillInstructionStructOutput[];
};

export type OnchainCrossChainOrderStruct = {
  fillDeadline: BigNumberish;
  orderDataType: BytesLike;
  orderData: BytesLike;
};

export type OnchainCrossChainOrderStructOutput = [number, string, string] & {
  fillDeadline: number;
  orderDataType: string;
  orderData: string;
};

export type GaslessCrossChainOrderStruct = {
  originSettler: string;
  user: string;
  nonce: BigNumberish;
  originChainId: BigNumberish;
  openDeadline: BigNumberish;
  fillDeadline: BigNumberish;
  orderDataType: BytesLike;
  orderData: BytesLike;
};

export type GaslessCrossChainOrderStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  number,
  number,
  string,
  string,
] & {
  originSettler: string;
  user: string;
  nonce: BigNumber;
  originChainId: BigNumber;
  openDeadline: number;
  fillDeadline: number;
  orderDataType: string;
  orderData: string;
};

export type OrderDataStruct = {
  sender: BytesLike;
  recipient: BytesLike;
  inputToken: BytesLike;
  outputToken: BytesLike;
  amountIn: BigNumberish;
  amountOut: BigNumberish;
  senderNonce: BigNumberish;
  originDomain: BigNumberish;
  destinationDomain: BigNumberish;
  fillDeadline: BigNumberish;
  data: BytesLike;
};

export type OrderDataStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  string,
] & {
  sender: string;
  recipient: string;
  inputToken: string;
  outputToken: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
  senderNonce: BigNumber;
  originDomain: number;
  destinationDomain: number;
  fillDeadline: number;
  data: string;
};

export declare namespace GasRouter {
  export type GasRouterConfigStruct = {
    domain: BigNumberish;
    gas: BigNumberish;
  };

  export type GasRouterConfigStructOutput = [number, BigNumber] & {
    domain: number;
    gas: BigNumber;
  };
}

export interface Hyperlane7683Interface extends utils.Interface {
  functions: {
    'GASLESS_CROSS_CHAIN_ORDER_TYPEHASH()': FunctionFragment;
    'PACKAGE_VERSION()': FunctionFragment;
    'PERMIT2()': FunctionFragment;
    'destinationGas(uint32)': FunctionFragment;
    'domains()': FunctionFragment;
    'enrollRemoteRouter(uint32,bytes32)': FunctionFragment;
    'enrollRemoteRouters(uint32[],bytes32[])': FunctionFragment;
    'fill(bytes32,bytes,bytes)': FunctionFragment;
    'handle(uint32,bytes32,bytes)': FunctionFragment;
    'hook()': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'interchainSecurityModule()': FunctionFragment;
    'localDomain()': FunctionFragment;
    'mailbox()': FunctionFragment;
    'open((uint32,bytes32,bytes))': FunctionFragment;
    'openFor((address,address,uint256,uint64,uint32,uint32,bytes32,bytes),bytes,bytes)': FunctionFragment;
    'orderFillerData(bytes32)': FunctionFragment;
    'orderStatus(bytes32)': FunctionFragment;
    'orders(bytes32)': FunctionFragment;
    'owner()': FunctionFragment;
    'quoteGasPayment(uint32)': FunctionFragment;
    'refund((bytes32,bytes32,bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint32,bytes)[])': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'resolve((uint32,bytes32,bytes))': FunctionFragment;
    'resolveFor((address,address,uint256,uint64,uint32,uint32,bytes32,bytes),bytes)': FunctionFragment;
    'routers(uint32)': FunctionFragment;
    'senderNonce(address)': FunctionFragment;
    'setDestinationGas(uint32,uint256)': FunctionFragment;
    'setDestinationGas((uint32,uint256)[])': FunctionFragment;
    'setHook(address)': FunctionFragment;
    'setInterchainSecurityModule(address)': FunctionFragment;
    'settle(bytes32[])': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unenrollRemoteRouter(uint32)': FunctionFragment;
    'unenrollRemoteRouters(uint32[])': FunctionFragment;
    'witnessHash((address,address,uint256,uint64,uint32,uint32,bytes32,bytes))': FunctionFragment;
    'witnessTypeString()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'GASLESS_CROSS_CHAIN_ORDER_TYPEHASH'
      | 'PACKAGE_VERSION'
      | 'PERMIT2'
      | 'destinationGas'
      | 'domains'
      | 'enrollRemoteRouter'
      | 'enrollRemoteRouters'
      | 'fill'
      | 'handle'
      | 'hook'
      | 'initialize'
      | 'interchainSecurityModule'
      | 'localDomain'
      | 'mailbox'
      | 'open'
      | 'openFor'
      | 'orderFillerData'
      | 'orderStatus'
      | 'orders'
      | 'owner'
      | 'quoteGasPayment'
      | 'refund'
      | 'renounceOwnership'
      | 'resolve'
      | 'resolveFor'
      | 'routers'
      | 'senderNonce'
      | 'setDestinationGas(uint32,uint256)'
      | 'setDestinationGas((uint32,uint256)[])'
      | 'setHook'
      | 'setInterchainSecurityModule'
      | 'settle'
      | 'transferOwnership'
      | 'unenrollRemoteRouter'
      | 'unenrollRemoteRouters'
      | 'witnessHash'
      | 'witnessTypeString',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'GASLESS_CROSS_CHAIN_ORDER_TYPEHASH',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'PERMIT2', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'destinationGas',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'domains', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'enrollRemoteRouter',
    values: [BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'enrollRemoteRouters',
    values: [BigNumberish[], BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'fill',
    values: [BytesLike, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'handle',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'hook', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainSecurityModule',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'localDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'mailbox', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'open',
    values: [OnchainCrossChainOrderStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'openFor',
    values: [GaslessCrossChainOrderStruct, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'orderFillerData',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'orderStatus',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'orders', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'quoteGasPayment',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'refund',
    values: [OrderDataStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'resolve',
    values: [OnchainCrossChainOrderStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'resolveFor',
    values: [GaslessCrossChainOrderStruct, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'routers',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'senderNonce', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setDestinationGas(uint32,uint256)',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDestinationGas((uint32,uint256)[])',
    values: [GasRouter.GasRouterConfigStruct[]],
  ): string;
  encodeFunctionData(functionFragment: 'setHook', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setInterchainSecurityModule',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'settle', values: [BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'unenrollRemoteRouter',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'unenrollRemoteRouters',
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'witnessHash',
    values: [GaslessCrossChainOrderStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'witnessTypeString',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'GASLESS_CROSS_CHAIN_ORDER_TYPEHASH',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'PERMIT2', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'destinationGas',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'domains', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'enrollRemoteRouter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enrollRemoteRouters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'fill', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'handle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hook', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'interchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'mailbox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'open', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openFor', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'orderFillerData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'orderStatus',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'orders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'quoteGasPayment',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'refund', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'resolve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'routers', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'senderNonce',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDestinationGas(uint32,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDestinationGas((uint32,uint256)[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setHook', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unenrollRemoteRouter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unenrollRemoteRouters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'witnessHash',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'witnessTypeString',
    data: BytesLike,
  ): Result;

  events: {
    'Filled(bytes32,bytes,bytes)': EventFragment;
    'GasSet(uint32,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'Open(bytes32,(address,uint64,uint32,uint32,(bytes32,uint256,bytes32,uint64)[],(bytes32,uint256,bytes32,uint64)[],(uint64,bytes32,bytes)[]))': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Refund(bytes32[])': EventFragment;
    'Refunded(bytes32,address)': EventFragment;
    'Settle(bytes32[],bytes[])': EventFragment;
    'Settled(bytes32,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Filled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GasSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Open'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Refund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Refunded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Settle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Settled'): EventFragment;
}

export interface FilledEventObject {
  orderId: string;
  originData: string;
  fillerData: string;
}
export type FilledEvent = TypedEvent<
  [string, string, string],
  FilledEventObject
>;

export type FilledEventFilter = TypedEventFilter<FilledEvent>;

export interface GasSetEventObject {
  domain: number;
  gas: BigNumber;
}
export type GasSetEvent = TypedEvent<[number, BigNumber], GasSetEventObject>;

export type GasSetEventFilter = TypedEventFilter<GasSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OpenEventObject {
  orderId: string;
  resolvedOrder: ResolvedCrossChainOrderStructOutput;
}
export type OpenEvent = TypedEvent<
  [string, ResolvedCrossChainOrderStructOutput],
  OpenEventObject
>;

export type OpenEventFilter = TypedEventFilter<OpenEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RefundEventObject {
  orderIds: string[];
}
export type RefundEvent = TypedEvent<[string[]], RefundEventObject>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface RefundedEventObject {
  orderId: string;
  receiver: string;
}
export type RefundedEvent = TypedEvent<[string, string], RefundedEventObject>;

export type RefundedEventFilter = TypedEventFilter<RefundedEvent>;

export interface SettleEventObject {
  orderIds: string[];
  ordersFillerData: string[];
}
export type SettleEvent = TypedEvent<[string[], string[]], SettleEventObject>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface SettledEventObject {
  orderId: string;
  receiver: string;
}
export type SettledEvent = TypedEvent<[string, string], SettledEventObject>;

export type SettledEventFilter = TypedEventFilter<SettledEvent>;

export interface Hyperlane7683 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Hyperlane7683Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GASLESS_CROSS_CHAIN_ORDER_TYPEHASH(
      overrides?: CallOverrides,
    ): Promise<[string]>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    PERMIT2(overrides?: CallOverrides): Promise<[string]>;

    destinationGas(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    domains(overrides?: CallOverrides): Promise<[number[]]>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    fill(
      _orderId: BytesLike,
      _originData: BytesLike,
      _fillerData: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    hook(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _customHook: string,
      _interchainSecurityModule: string,
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<[string]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    mailbox(overrides?: CallOverrides): Promise<[string]>;

    open(
      order: OnchainCrossChainOrderStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    openFor(
      order: GaslessCrossChainOrderStruct,
      signature: BytesLike,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    orderFillerData(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { fillerData: string }>;

    orderStatus(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[number] & { status: number }>;

    orders(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string,
      ] & {
        sender: string;
        recipient: string;
        inputToken: string;
        outputToken: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
        senderNonce: BigNumber;
        originDomain: number;
        destinationDomain: number;
        fillDeadline: number;
        data: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quoteGasPayment(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    refund(
      _ordersData: OrderDataStruct[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    resolve(
      order: OnchainCrossChainOrderStruct,
      overrides?: CallOverrides,
    ): Promise<
      [ResolvedCrossChainOrderStructOutput] & {
        resolvedOrder: ResolvedCrossChainOrderStructOutput;
      }
    >;

    resolveFor(
      order: GaslessCrossChainOrderStruct,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [ResolvedCrossChainOrderStructOutput] & {
        resolvedOrder: ResolvedCrossChainOrderStructOutput;
      }
    >;

    routers(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    senderNonce(
      sender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    'setDestinationGas(uint32,uint256)'(
      domain: BigNumberish,
      gas: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setDestinationGas((uint32,uint256)[])'(
      gasConfigs: GasRouter.GasRouterConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    settle(
      _orderIds: BytesLike[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    witnessHash(
      order: GaslessCrossChainOrderStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    witnessTypeString(overrides?: CallOverrides): Promise<[string]>;
  };

  GASLESS_CROSS_CHAIN_ORDER_TYPEHASH(
    overrides?: CallOverrides,
  ): Promise<string>;

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  PERMIT2(overrides?: CallOverrides): Promise<string>;

  destinationGas(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  domains(overrides?: CallOverrides): Promise<number[]>;

  enrollRemoteRouter(
    _domain: BigNumberish,
    _router: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  enrollRemoteRouters(
    _domains: BigNumberish[],
    _addresses: BytesLike[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  fill(
    _orderId: BytesLike,
    _originData: BytesLike,
    _fillerData: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  handle(
    _origin: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  hook(overrides?: CallOverrides): Promise<string>;

  initialize(
    _customHook: string,
    _interchainSecurityModule: string,
    _owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  mailbox(overrides?: CallOverrides): Promise<string>;

  open(
    order: OnchainCrossChainOrderStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  openFor(
    order: GaslessCrossChainOrderStruct,
    signature: BytesLike,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  orderFillerData(
    orderId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  orderStatus(orderId: BytesLike, overrides?: CallOverrides): Promise<number>;

  orders(
    orderId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      string,
    ] & {
      sender: string;
      recipient: string;
      inputToken: string;
      outputToken: string;
      amountIn: BigNumber;
      amountOut: BigNumber;
      senderNonce: BigNumber;
      originDomain: number;
      destinationDomain: number;
      fillDeadline: number;
      data: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  quoteGasPayment(
    _destinationDomain: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  refund(
    _ordersData: OrderDataStruct[],
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  resolve(
    order: OnchainCrossChainOrderStruct,
    overrides?: CallOverrides,
  ): Promise<ResolvedCrossChainOrderStructOutput>;

  resolveFor(
    order: GaslessCrossChainOrderStruct,
    arg1: BytesLike,
    overrides?: CallOverrides,
  ): Promise<ResolvedCrossChainOrderStructOutput>;

  routers(_domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

  senderNonce(sender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'setDestinationGas(uint32,uint256)'(
    domain: BigNumberish,
    gas: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setDestinationGas((uint32,uint256)[])'(
    gasConfigs: GasRouter.GasRouterConfigStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setHook(
    _hook: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setInterchainSecurityModule(
    _module: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  settle(
    _orderIds: BytesLike[],
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  unenrollRemoteRouter(
    _domain: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  unenrollRemoteRouters(
    _domains: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  witnessHash(
    order: GaslessCrossChainOrderStruct,
    overrides?: CallOverrides,
  ): Promise<string>;

  witnessTypeString(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    GASLESS_CROSS_CHAIN_ORDER_TYPEHASH(
      overrides?: CallOverrides,
    ): Promise<string>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    PERMIT2(overrides?: CallOverrides): Promise<string>;

    destinationGas(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    domains(overrides?: CallOverrides): Promise<number[]>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    fill(
      _orderId: BytesLike,
      _originData: BytesLike,
      _fillerData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    hook(overrides?: CallOverrides): Promise<string>;

    initialize(
      _customHook: string,
      _interchainSecurityModule: string,
      _owner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    mailbox(overrides?: CallOverrides): Promise<string>;

    open(
      order: OnchainCrossChainOrderStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    openFor(
      order: GaslessCrossChainOrderStruct,
      signature: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    orderFillerData(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    orderStatus(orderId: BytesLike, overrides?: CallOverrides): Promise<number>;

    orders(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string,
      ] & {
        sender: string;
        recipient: string;
        inputToken: string;
        outputToken: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
        senderNonce: BigNumber;
        originDomain: number;
        destinationDomain: number;
        fillDeadline: number;
        data: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    quoteGasPayment(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    refund(
      _ordersData: OrderDataStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolve(
      order: OnchainCrossChainOrderStruct,
      overrides?: CallOverrides,
    ): Promise<ResolvedCrossChainOrderStructOutput>;

    resolveFor(
      order: GaslessCrossChainOrderStruct,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<ResolvedCrossChainOrderStructOutput>;

    routers(_domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

    senderNonce(sender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'setDestinationGas(uint32,uint256)'(
      domain: BigNumberish,
      gas: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setDestinationGas((uint32,uint256)[])'(
      gasConfigs: GasRouter.GasRouterConfigStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setHook(_hook: string, overrides?: CallOverrides): Promise<void>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    settle(_orderIds: BytesLike[], overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    witnessHash(
      order: GaslessCrossChainOrderStruct,
      overrides?: CallOverrides,
    ): Promise<string>;

    witnessTypeString(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Filled(bytes32,bytes,bytes)'(
      orderId?: null,
      originData?: null,
      fillerData?: null,
    ): FilledEventFilter;
    Filled(
      orderId?: null,
      originData?: null,
      fillerData?: null,
    ): FilledEventFilter;

    'GasSet(uint32,uint256)'(domain?: null, gas?: null): GasSetEventFilter;
    GasSet(domain?: null, gas?: null): GasSetEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'Open(bytes32,(address,uint64,uint32,uint32,(bytes32,uint256,bytes32,uint64)[],(bytes32,uint256,bytes32,uint64)[],(uint64,bytes32,bytes)[]))'(
      orderId?: BytesLike | null,
      resolvedOrder?: null,
    ): OpenEventFilter;
    Open(orderId?: BytesLike | null, resolvedOrder?: null): OpenEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Refund(bytes32[])'(orderIds?: null): RefundEventFilter;
    Refund(orderIds?: null): RefundEventFilter;

    'Refunded(bytes32,address)'(
      orderId?: null,
      receiver?: null,
    ): RefundedEventFilter;
    Refunded(orderId?: null, receiver?: null): RefundedEventFilter;

    'Settle(bytes32[],bytes[])'(
      orderIds?: null,
      ordersFillerData?: null,
    ): SettleEventFilter;
    Settle(orderIds?: null, ordersFillerData?: null): SettleEventFilter;

    'Settled(bytes32,address)'(
      orderId?: null,
      receiver?: null,
    ): SettledEventFilter;
    Settled(orderId?: null, receiver?: null): SettledEventFilter;
  };

  estimateGas: {
    GASLESS_CROSS_CHAIN_ORDER_TYPEHASH(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT2(overrides?: CallOverrides): Promise<BigNumber>;

    destinationGas(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    domains(overrides?: CallOverrides): Promise<BigNumber>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    fill(
      _orderId: BytesLike,
      _originData: BytesLike,
      _fillerData: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    hook(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _customHook: string,
      _interchainSecurityModule: string,
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    mailbox(overrides?: CallOverrides): Promise<BigNumber>;

    open(
      order: OnchainCrossChainOrderStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    openFor(
      order: GaslessCrossChainOrderStruct,
      signature: BytesLike,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    orderFillerData(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    orderStatus(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    orders(orderId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quoteGasPayment(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    refund(
      _ordersData: OrderDataStruct[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    resolve(
      order: OnchainCrossChainOrderStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    resolveFor(
      order: GaslessCrossChainOrderStruct,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    routers(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    senderNonce(sender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'setDestinationGas(uint32,uint256)'(
      domain: BigNumberish,
      gas: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setDestinationGas((uint32,uint256)[])'(
      gasConfigs: GasRouter.GasRouterConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    settle(
      _orderIds: BytesLike[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    witnessHash(
      order: GaslessCrossChainOrderStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    witnessTypeString(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GASLESS_CROSS_CHAIN_ORDER_TYPEHASH(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destinationGas(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    domains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    fill(
      _orderId: BytesLike,
      _originData: BytesLike,
      _fillerData: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    hook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _customHook: string,
      _interchainSecurityModule: string,
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    interchainSecurityModule(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mailbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open(
      order: OnchainCrossChainOrderStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    openFor(
      order: GaslessCrossChainOrderStruct,
      signature: BytesLike,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    orderFillerData(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    orderStatus(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    orders(
      orderId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteGasPayment(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    refund(
      _ordersData: OrderDataStruct[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    resolve(
      order: OnchainCrossChainOrderStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    resolveFor(
      order: GaslessCrossChainOrderStruct,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    routers(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    senderNonce(
      sender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'setDestinationGas(uint32,uint256)'(
      domain: BigNumberish,
      gas: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setDestinationGas((uint32,uint256)[])'(
      gasConfigs: GasRouter.GasRouterConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    settle(
      _orderIds: BytesLike[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    witnessHash(
      order: GaslessCrossChainOrderStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    witnessTypeString(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
