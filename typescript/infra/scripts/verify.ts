import {
  ChainMap,
  CompilerOptions,
  ContractVerifier,
  VerificationInput,
} from '@hyperlane-xyz/sdk';

import { supportedChainNames as mainnet3Chains } from '../config/environments/mainnet3/chains';
import { supportedChainNames as testnet4Chains } from '../config/environments/testnet4/chains';
import { fetchGCPSecret } from '../src/utils/gcloud';
import { execCmd, readFileAtPath, readJSONAtPath } from '../src/utils/utils';

import { assertEnvironment, getArgs } from './agent-utils';
import { getEnvironmentConfig } from './core-utils';

// Requires https://github.com/crytic/solc-select to be installed and
// present in your $PATH. The current solc compiler version should
// already be installed via `solc-select install $VERSION`
async function main() {
  const argv = await getArgs()
    // This file can be generated by running `flatten.sh` from the solidity directory
    .string('source')
    .describe('source', 'flattened solidity source file or standard input json')
    .demandOption('source')
    .string('artifacts')
    .describe('artifacts', 'verification artifacts JSON file')
    .demandOption('artifacts')
    .boolean('disableOptimizations')
    .describe(
      'disableOptimizations',
      'flag to indicate optimization was not used in compilation',
    )
    .default('disableOptimizations', false)
    .string('network')
    .describe('network', 'optional target network').argv;

  const environment = assertEnvironment(argv.e!);
  const config = getEnvironmentConfig(environment);
  const multiProvider = await config.getMultiProvider();

  const verification: ChainMap<VerificationInput> = readJSONAtPath(
    argv.artifacts!,
  );
  const supportedChainNames =
    environment === 'mainnet3'
      ? mainnet3Chains
      : environment === 'testnet4'
      ? testnet4Chains
      : undefined;

  const sourcePath = argv.source!;
  const isStandardJson = sourcePath.endsWith('.json');

  const source = isStandardJson
    ? readJSONAtPath(sourcePath).input
    : readFileAtPath(sourcePath);

  // from solidity/core/hardhat.config.ts
  const compilerOptions: CompilerOptions = {
    codeformat: isStandardJson
      ? 'solidity-standard-json-input'
      : 'solidity-single-file',
    compilerversion: 'v0.8.19+commit.7dd6d404',
    licenseType: '3',
    optimizationUsed: argv.disableOptimizations ? '0' : '1',
    ...(argv.disableOptimizations ? {} : { runs: '999999' }),
  };

  const versionRegex = /v(\d.\d.\d+)\+commit.\w+/;
  const matches = versionRegex.exec(compilerOptions.compilerversion);
  if (!matches) {
    throw new Error(
      `Invalid compiler version ${compilerOptions.compilerversion}`,
    );
  }

  // ensures flattened source is compilable
  if (!isStandardJson) {
    await execCmd(`solc-select use ${matches[1]}`);
    await execCmd(`solc ${sourcePath}`);
  }

  const apiKeys: ChainMap<string> = (await fetchGCPSecret(
    'explorer-api-keys',
    true,
  )) as any;

  const verifier = new ContractVerifier(
    verification,
    multiProvider,
    apiKeys,
    source,
    compilerOptions,
    supportedChainNames,
  );

  const failedResults = (
    await verifier.verify(argv.network ? [argv.network] : undefined)
  ).filter((result) => result.status === 'rejected');

  if (failedResults.length > 0) {
    console.error(
      'Verification failed for the following contracts:',
      failedResults.map((result) => result),
    );
    process.exit(1);
  }

  process.exit(0);
}

main().then(console.log).catch(console.error);
